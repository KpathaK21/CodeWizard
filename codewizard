#!/usr/bin/env python3
"""
CodeWizard - All-in-one script to run the CodeWizard application
"""

import os
import sys
import subprocess
import webbrowser
import time
import platform
from pathlib import Path

def print_banner():
    """Print the CodeWizard banner."""
    print("""
    ╔═══════════════════════════════════════════════════════════╗
    ║                                                           ║
    ║   ██████╗ ██████╗ ██████╗ ███████╗██╗    ██╗██╗███████╗  ║
    ║  ██╔════╝██╔═══██╗██╔══██╗██╔════╝██║    ██║██║╚══███╔╝  ║
    ║  ██║     ██║   ██║██║  ██║█████╗  ██║ █╗ ██║██║  ███╔╝   ║
    ║  ██║     ██║   ██║██║  ██║██╔══╝  ██║███╗██║██║ ███╔╝    ║
    ║  ╚██████╗╚██████╔╝██████╔╝███████╗╚███╔███╔╝██║███████╗  ║
    ║   ╚═════╝ ╚═════╝ ╚═════╝ ╚══════╝ ╚══╝╚══╝ ╚═╝╚══════╝  ║
    ║                                                           ║
    ║                AI Debugging Assistant                     ║
    ║                                                           ║
    ╚═══════════════════════════════════════════════════════════╝
    """)

def check_dependencies():
    """Check if all required dependencies are installed."""
    print("🔍 Checking dependencies...")
    
    # Check Python version
    python_version = sys.version_info
    if python_version.major < 3 or (python_version.major == 3 and python_version.minor < 8):
        print("❌ Python 3.8 or higher is required.")
        return False
    
    # Check if pip is installed
    try:
        subprocess.run([sys.executable, "-m", "pip", "--version"], check=True, capture_output=True)
    except subprocess.CalledProcessError:
        print("❌ pip is not installed. Please install pip.")
        return False
    
    # Check if Node.js is installed
    try:
        subprocess.run(["node", "--version"], check=True, capture_output=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("❌ Node.js is not installed. Please install Node.js.")
        return False
    
    # Check if npm is installed
    try:
        subprocess.run(["npm", "--version"], check=True, capture_output=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("❌ npm is not installed. Please install npm.")
        return False
    
    print("✅ All dependencies are installed.")
    return True

def setup_environment():
    """Set up the environment for CodeWizard."""
    print("🔧 Setting up environment...")
    
    # Create virtual environment if it doesn't exist
    if not Path("venv").exists():
        print("Creating virtual environment...")
        subprocess.run([sys.executable, "-m", "venv", "venv"], check=True)
    
    # Activate virtual environment and install requirements
    print("Installing Python dependencies...")
    if platform.system() == "Windows":
        pip_path = Path("venv") / "Scripts" / "pip"
    else:
        pip_path = Path("venv") / "bin" / "pip"
    
    subprocess.run([str(pip_path), "install", "-r", "requirements.txt"], check=True)
    
    # Install frontend dependencies if they don't exist
    if not Path("frontend/node_modules").exists():
        print("Installing frontend dependencies...")
        subprocess.run(["npm", "install"], cwd="frontend", check=True)
    
    # Build frontend if it doesn't exist
    if not Path("frontend/build").exists():
        print("Building frontend...")
        subprocess.run(["npm", "run", "build"], cwd="frontend", check=True)
    
    # Check if .env file exists, if not create from example
    if not Path(".env").exists() and Path(".env.example").exists():
        print("Creating .env file from .env.example...")
        with open(".env.example", "r") as example_file:
            example_content = example_file.read()
        
        with open(".env", "w") as env_file:
            env_file.write(example_content)
        
        print("⚠️ Please edit the .env file to add your API keys.")
    
    print("✅ Environment setup complete.")

def rebuild_frontend():
    """Rebuild the frontend."""
    print("🔨 Rebuilding frontend...")
    
    # Navigate to the frontend directory
    os.chdir("frontend")
    
    # Install dependencies
    print("📦 Installing dependencies...")
    subprocess.run(["npm", "install"], check=True)
    
    # Build the frontend
    print("🏗️ Building the frontend...")
    subprocess.run(["npm", "run", "build"], check=True)
    
    # Navigate back to the root directory
    os.chdir("..")
    
    print("✅ Frontend rebuilt successfully.")

def run_application():
    """Run the CodeWizard application."""
    print("🚀 Starting CodeWizard...")
    
    # Stop any running instances of the application
    if platform.system() == "Windows":
        subprocess.run(["taskkill", "/f", "/im", "python.exe", "/fi", "\"WINDOWTITLE eq app.py\""], 
                      shell=True, stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL)
    else:
        subprocess.run(["pkill", "-f", "python app.py"], 
                      shell=True, stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL)
    
    # Determine the Python executable to use
    if platform.system() == "Windows":
        python_path = str(Path("venv") / "Scripts" / "python")
    else:
        python_path = str(Path("venv") / "bin" / "python")
    
    # Start the Flask application
    flask_process = subprocess.Popen([python_path, "app.py"])
    
    # Wait for the server to start
    print("⏳ Waiting for server to start...")
    time.sleep(3)
    
    # Open the application in the default web browser
    print("🌐 Opening CodeWizard in your browser...")
    if platform.system() == "Darwin":  # macOS
        subprocess.run(["open", "http://localhost:8000"])
    elif platform.system() == "Windows":
        subprocess.run(["start", "http://localhost:8000"], shell=True)
    elif platform.system() == "Linux":
        subprocess.run(["xdg-open", "http://localhost:8000"])
    else:
        print("Please open http://localhost:8000 in your browser")
    
    try:
        # Keep the application running until Ctrl+C is pressed
        print("\n🧙 CodeWizard is now running!")
        print("Press Ctrl+C to stop the application.")
        flask_process.wait()
    except KeyboardInterrupt:
        print("\n🛑 Stopping CodeWizard...")
        flask_process.terminate()
        flask_process.wait()
        print("✅ CodeWizard stopped.")

def main():
    """Main function to run the CodeWizard application."""
    print_banner()
    
    if not check_dependencies():
        return
    
    setup_environment()
    
    # Ask if user wants to rebuild the frontend
    rebuild = input("Do you want to rebuild the frontend? (y/n): ").strip().lower()
    if rebuild == 'y':
        rebuild_frontend()
    
    run_application()

if __name__ == "__main__":
    main()